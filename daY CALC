    #This one gives you a day on any given date #from 0001 AD and the dates of the next 5 #weeks.
    #Usage is:
    #Programname DayOftheMonth Monthoftheyear #Year
    #eg dates 26 04 2004


    # This function returns the number of days per month
    # Requires month and year. NOTE No leading zeros
    # Usage dayspm 5 2002

    dayspm () {
    case $1 in
    4|6|9|11) ndays=30
    ;;
    1|3|5|7|8|10|12) ndays=31
    ;;
    2)
    if [ `echo "scale=0; $2%4" | bc` -eq 0 ]; then
    ndays=29
    else
    ndays=28
    fi
    ;;
    *)
    echo "Month Input error"
    exit 1
    ;;
    esac
    return $ndays
    }

    if [ $# -eq 3 ]; then
    cal $2 $3
    day=0
    week=`cal $2 $3 | grep -w $1`
    year=$3
    for pos in 1 4 7 10 13 16 19
    do
    day=`expr $day + 1`
    pos1=`expr $pos + 1`
    dpos=`echo "$week" | cut -c$pos-$pos1`
    dpos=`echo $dpos`
    if [ "$1" = "$dpos" ]; then
    case $day in
    1) echo "That date is a Sunday"
    ;;
    2) echo "That date is a Monday"
    ;;
    3) echo "That date is a Tuesday"
    ;;
    4) echo "That date is a Wednesday"
    ;;
    5) echo "That date is a Thursday"
    ;;
    6) echo "That date is a Friday"
    ;;
    7) echo "That date is a Saturday"
    ;;
    *) echo "Woooops day error"
    ;;
    esac
    month=`expr $2 + 0`
    pmonth=$month
    ndays=`dayspm $month $3;echo $?`
    echo "Next 5 weeks are: "
    for nxwk in 7 14 21 28 35
    do
    week=`expr $1 + $nxwk`
    if [ $week -gt $ndays ]; then
    month1=`expr $month + 1`
    if [ $month1 -gt 12 ]; then
    month1=1
    fi
    pmonth=$month1
    week=`expr $week - $ndays`
    daysnm=`dayspm $month1 $3;echo $?`
    if [ $week -gt $daysnm ]; then
    week=`expr $week - $daysnm`
    pmonth=`expr $pmonth + 1`
    fi

    fi
    echo "${week}/${pmonth}"
    done
    fi
    done
    else
    echo Usage $0 day month year
    exit 1
    fi
